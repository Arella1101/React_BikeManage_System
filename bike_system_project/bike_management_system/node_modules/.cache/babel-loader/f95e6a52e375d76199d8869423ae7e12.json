{"ast":null,"code":"import \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/checkbox/style/css\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/date-picker/style/css\";\nimport _DatePicker from \"antd/lib/date-picker\";\nimport \"antd/lib/select/style/css\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/form/style/css\";\nimport _Form from \"antd/lib/form\";\nvar _jsxFileName = \"C:\\\\Users\\\\Shuwen\\\\bike_system\\\\src\\\\components\\\\BaseForm\\\\index.js\";\nimport React from 'react';\nimport Utils from '../../utils/utils';\nconst FormItem = _Form.Item;\nconst Option = _Select.Option;\n\nclass FilterForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleFilterSubmit = values => {\n      let fieldsValue = values;\n      this.props.filterSubmit(fieldsValue);\n    };\n\n    this.reset = () => {\n      this.props.form.resetFields();\n    };\n\n    this.initFormList = () => {\n      const formList = this.props.formList;\n      const formItemList = [];\n\n      if (formList && formList.length > 0) {\n        formList.forEach((item, i) => {\n          let label = item.label;\n          let field = item.field;\n          let initialValue = item.initialValue || '';\n          let placeholder = item.placeholder;\n          let width = item.width;\n\n          if (item.type == '时间查询') {\n            const begin_time = /*#__PURE__*/React.createElement(FormItem, {\n              label: \"\\u8BA2\\u5355\\u65F6\\u95F4\",\n              key: field,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 29,\n                columnNumber: 40\n              }\n            }, getFieldDecorator('begin_time')( /*#__PURE__*/React.createElement(_DatePicker, {\n              showTime: true,\n              placeholder: placeholder,\n              format: \"YYYY-MM-DD HH:mm:ss\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 33\n              }\n            })));\n            formItemList.push(begin_time);\n            const end_time = /*#__PURE__*/React.createElement(FormItem, {\n              label: \"~\",\n              colon: false,\n              key: field,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 38\n              }\n            }, getFieldDecorator('end_time')( /*#__PURE__*/React.createElement(_DatePicker, {\n              showTime: true,\n              placeholder: placeholder,\n              format: \"YYYY-MM-DD HH:mm:ss\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 33\n              }\n            })));\n            formItemList.push(end_time);\n          } else if (item.type == 'INPUT') {\n            const INPUT = /*#__PURE__*/React.createElement(FormItem, {\n              label: label,\n              key: field,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 35\n              }\n            }, getFieldDecorator([field], {\n              initialValue: initialValue\n            })( /*#__PURE__*/React.createElement(_Input, {\n              type: \"text\",\n              placeholder: placeholder,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 33\n              }\n            })));\n            formItemList.push(INPUT);\n          } else if (item.type == 'SELECT') {\n            const SELECT = /*#__PURE__*/React.createElement(FormItem, {\n              label: label,\n              key: field,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 36\n              }\n            }, getFieldDecorator([field], {\n              initialValue: initialValue\n            })( /*#__PURE__*/React.createElement(_Select, {\n              style: {\n                width: width\n              },\n              placeholder: placeholder,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 33\n              }\n            }, Utils.getOptionList(item.list))));\n            formItemList.push(SELECT);\n          } else if (item.type == 'CHECKBOX') {\n            const CHECKBOX = /*#__PURE__*/React.createElement(FormItem, {\n              label: label,\n              key: field,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 38\n              }\n            }, getFieldDecorator([field], {\n              valuePropName: 'checked',\n              initialValue: initialValue //true | false\n\n            })( /*#__PURE__*/React.createElement(_Checkbox, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 33\n              }\n            }, label)));\n            formItemList.push(CHECKBOX);\n          }\n        });\n      }\n\n      return formItemList;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(_Form, {\n      layout: \"inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, this.initFormList(), /*#__PURE__*/React.createElement(FormItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Button, {\n      type: \"primary\",\n      style: {\n        margin: '0 20px'\n      },\n      onClick: this.handleFilterSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, \"\\u67E5\\u8BE2\"), /*#__PURE__*/React.createElement(_Button, {\n      onClick: this.reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, \"\\u91CD\\u7F6E\")));\n  }\n\n}\n\nexport default _Form.create({})(FilterForm);","map":{"version":3,"sources":["C:/Users/Shuwen/bike_system/src/components/BaseForm/index.js"],"names":["React","Utils","FormItem","Item","Option","FilterForm","Component","handleFilterSubmit","values","fieldsValue","props","filterSubmit","reset","form","resetFields","initFormList","formList","formItemList","length","forEach","item","i","label","field","initialValue","placeholder","width","type","begin_time","getFieldDecorator","push","end_time","INPUT","SELECT","getOptionList","list","CHECKBOX","valuePropName","render","margin","create"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Input, Select, Form, Button, Checkbox, Radio, DatePicker} from 'antd'\r\nimport Utils from '../../utils/utils';\r\nconst FormItem = Form.Item;\r\nconst Option = Select.Option;\r\n\r\nclass FilterForm extends React.Component{\r\n\r\n    handleFilterSubmit = values=>{\r\n        let fieldsValue = values;\r\n        this.props.filterSubmit(fieldsValue);\r\n    }\r\n\r\n    reset = ()=>{\r\n        this.props.form.resetFields();\r\n    }\r\n\r\n    initFormList = ()=>{\r\n        const formList = this.props.formList;\r\n        const formItemList = [];\r\n        if (formList && formList.length>0){\r\n            formList.forEach((item,i)=>{\r\n                let label = item.label;\r\n                let field = item.field;\r\n                let initialValue = item.initialValue || '';\r\n                let placeholder = item.placeholder;\r\n                let width = item.width;\r\n                if (item.type == '时间查询'){\r\n                    const begin_time = <FormItem label=\"订单时间\" key={field}>\r\n                        {\r\n                            getFieldDecorator('begin_time')(\r\n                                <DatePicker showTime={true} placeholder={placeholder} format=\"YYYY-MM-DD HH:mm:ss\"/>\r\n                            )\r\n                        }\r\n                    </FormItem>;\r\n                    formItemList.push(begin_time)\r\n                    const end_time = <FormItem label=\"~\" colon={false} key={field}>\r\n                        {\r\n                            getFieldDecorator('end_time')(\r\n                                <DatePicker showTime={true} placeholder={placeholder} format=\"YYYY-MM-DD HH:mm:ss\" />\r\n                            )\r\n                        }\r\n                    </FormItem>;\r\n                    formItemList.push(end_time)\r\n                }else if(item.type == 'INPUT'){\r\n                    const INPUT = <FormItem label={label} key={field}>\r\n                        {\r\n                            getFieldDecorator([field],{\r\n                                initialValue: initialValue\r\n                            })(\r\n                                <Input type=\"text\" placeholder={placeholder} />\r\n                            )\r\n                        }\r\n                    </FormItem>;\r\n                    formItemList.push(INPUT)\r\n                } else if (item.type == 'SELECT') {\r\n                    const SELECT = <FormItem label={label} key={field}>\r\n                        {\r\n                            getFieldDecorator([field], {\r\n                                initialValue: initialValue\r\n                            })(\r\n                                <Select\r\n                                    style={{ width: width }}\r\n                                    placeholder={placeholder}\r\n                                >\r\n                                    {Utils.getOptionList(item.list)}\r\n                                </Select>\r\n                            )\r\n                        }\r\n                    </FormItem>;\r\n                    formItemList.push(SELECT)\r\n                } else if (item.type == 'CHECKBOX') {\r\n                    const CHECKBOX = <FormItem label={label} key={field}>\r\n                        {\r\n                            getFieldDecorator([field], {\r\n                                valuePropName: 'checked',\r\n                                initialValue: initialValue //true | false\r\n                            })(\r\n                                <Checkbox>\r\n                                    {label}\r\n                                </Checkbox>\r\n                            )\r\n                        }\r\n                    </FormItem>;\r\n                    formItemList.push(CHECKBOX)\r\n                }\r\n            })\r\n        }\r\n        return formItemList;\r\n    }\r\n    render(){\r\n        return (\r\n            <Form layout=\"inline\">\r\n                { this.initFormList() }\r\n                <FormItem>\r\n                    <Button type=\"primary\" style={{ margin: '0 20px' }} onClick={this.handleFilterSubmit}>查询</Button>\r\n                    <Button onClick={this.reset}>重置</Button>\r\n                </FormItem>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\nexport default Form.create({})(FilterForm);"]},"metadata":{},"sourceType":"module"}