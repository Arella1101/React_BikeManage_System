{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = calculateNodeHeight; // Thanks to https://github.com/andreypopp/react-textarea-autosize/\n\n/**\n * calculateNodeHeight(uiTextNode, useCache = false)\n */\n\nvar HIDDEN_TEXTAREA_STYLE = '\\n  min-height:0 !important;\\n  max-height:none !important;\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important\\n';\nvar SIZING_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];\nvar computedStyleCache = {};\nvar hiddenTextarea = void 0;\n\nfunction calculateNodeStyling(node) {\n  var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var nodeRef = node.getAttribute('id') || node.getAttribute('data-reactid') || node.getAttribute('name');\n\n  if (useCache && computedStyleCache[nodeRef]) {\n    return computedStyleCache[nodeRef];\n  }\n\n  var style = window.getComputedStyle(node);\n  var boxSizing = style.getPropertyValue('box-sizing') || style.getPropertyValue('-moz-box-sizing') || style.getPropertyValue('-webkit-box-sizing');\n  var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));\n  var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));\n  var sizingStyle = SIZING_STYLE.map(function (name) {\n    return name + ':' + style.getPropertyValue(name);\n  }).join(';');\n  var nodeInfo = {\n    sizingStyle: sizingStyle,\n    paddingSize: paddingSize,\n    borderSize: borderSize,\n    boxSizing: boxSizing\n  };\n\n  if (useCache && nodeRef) {\n    computedStyleCache[nodeRef] = nodeInfo;\n  }\n\n  return nodeInfo;\n}\n\nfunction calculateNodeHeight(uiTextNode) {\n  var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    document.body.appendChild(hiddenTextarea);\n  } // Fix wrap=\"off\" issue\n  // https://github.com/ant-design/ant-design/issues/6577\n\n\n  if (uiTextNode.getAttribute('wrap')) {\n    hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));\n  } else {\n    hiddenTextarea.removeAttribute('wrap');\n  } // Copy all CSS properties that have an impact on the height of the content in\n  // the textbox\n\n\n  var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache),\n      paddingSize = _calculateNodeStyling.paddingSize,\n      borderSize = _calculateNodeStyling.borderSize,\n      boxSizing = _calculateNodeStyling.boxSizing,\n      sizingStyle = _calculateNodeStyling.sizingStyle; // Need to have the overflow attribute to hide the scrollbar otherwise\n  // text-lines will not calculated properly as the shadow will technically be\n  // narrower for content\n\n\n  hiddenTextarea.setAttribute('style', sizingStyle + ';' + HIDDEN_TEXTAREA_STYLE);\n  hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';\n  var minHeight = Number.MIN_SAFE_INTEGER;\n  var maxHeight = Number.MAX_SAFE_INTEGER;\n  var height = hiddenTextarea.scrollHeight;\n  var overflowY = void 0;\n\n  if (boxSizing === 'border-box') {\n    // border-box: add border, since height = content + padding + border\n    height = height + borderSize;\n  } else if (boxSizing === 'content-box') {\n    // remove padding, since height = content\n    height = height - paddingSize;\n  }\n\n  if (minRows !== null || maxRows !== null) {\n    // measure height of a textarea with a single row\n    hiddenTextarea.value = ' ';\n    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n\n    if (minRows !== null) {\n      minHeight = singleRowHeight * minRows;\n\n      if (boxSizing === 'border-box') {\n        minHeight = minHeight + paddingSize + borderSize;\n      }\n\n      height = Math.max(minHeight, height);\n    }\n\n    if (maxRows !== null) {\n      maxHeight = singleRowHeight * maxRows;\n\n      if (boxSizing === 'border-box') {\n        maxHeight = maxHeight + paddingSize + borderSize;\n      }\n\n      overflowY = height > maxHeight ? '' : 'hidden';\n      height = Math.min(maxHeight, height);\n    }\n  } // Remove scroll bar flash when autosize without maxRows\n\n\n  if (!maxRows) {\n    overflowY = 'hidden';\n  }\n\n  return {\n    height: height,\n    minHeight: minHeight,\n    maxHeight: maxHeight,\n    overflowY: overflowY\n  };\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["C:/Users/Shuwen/bike_system/node_modules/antd/lib/input/calculateNodeHeight.js"],"names":["Object","defineProperty","exports","value","calculateNodeHeight","HIDDEN_TEXTAREA_STYLE","SIZING_STYLE","computedStyleCache","hiddenTextarea","calculateNodeStyling","node","useCache","arguments","length","undefined","nodeRef","getAttribute","style","window","getComputedStyle","boxSizing","getPropertyValue","paddingSize","parseFloat","borderSize","sizingStyle","map","name","join","nodeInfo","uiTextNode","minRows","maxRows","document","createElement","body","appendChild","setAttribute","removeAttribute","_calculateNodeStyling","placeholder","minHeight","Number","MIN_SAFE_INTEGER","maxHeight","MAX_SAFE_INTEGER","height","scrollHeight","overflowY","singleRowHeight","Math","max","min","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports['default'] = calculateNodeHeight;\n// Thanks to https://github.com/andreypopp/react-textarea-autosize/\n/**\n * calculateNodeHeight(uiTextNode, useCache = false)\n */\nvar HIDDEN_TEXTAREA_STYLE = '\\n  min-height:0 !important;\\n  max-height:none !important;\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important\\n';\nvar SIZING_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];\nvar computedStyleCache = {};\nvar hiddenTextarea = void 0;\nfunction calculateNodeStyling(node) {\n    var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var nodeRef = node.getAttribute('id') || node.getAttribute('data-reactid') || node.getAttribute('name');\n    if (useCache && computedStyleCache[nodeRef]) {\n        return computedStyleCache[nodeRef];\n    }\n    var style = window.getComputedStyle(node);\n    var boxSizing = style.getPropertyValue('box-sizing') || style.getPropertyValue('-moz-box-sizing') || style.getPropertyValue('-webkit-box-sizing');\n    var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));\n    var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));\n    var sizingStyle = SIZING_STYLE.map(function (name) {\n        return name + ':' + style.getPropertyValue(name);\n    }).join(';');\n    var nodeInfo = {\n        sizingStyle: sizingStyle,\n        paddingSize: paddingSize,\n        borderSize: borderSize,\n        boxSizing: boxSizing\n    };\n    if (useCache && nodeRef) {\n        computedStyleCache[nodeRef] = nodeInfo;\n    }\n    return nodeInfo;\n}\nfunction calculateNodeHeight(uiTextNode) {\n    var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n    if (!hiddenTextarea) {\n        hiddenTextarea = document.createElement('textarea');\n        document.body.appendChild(hiddenTextarea);\n    }\n    // Fix wrap=\"off\" issue\n    // https://github.com/ant-design/ant-design/issues/6577\n    if (uiTextNode.getAttribute('wrap')) {\n        hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));\n    } else {\n        hiddenTextarea.removeAttribute('wrap');\n    }\n    // Copy all CSS properties that have an impact on the height of the content in\n    // the textbox\n\n    var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache),\n        paddingSize = _calculateNodeStyling.paddingSize,\n        borderSize = _calculateNodeStyling.borderSize,\n        boxSizing = _calculateNodeStyling.boxSizing,\n        sizingStyle = _calculateNodeStyling.sizingStyle;\n    // Need to have the overflow attribute to hide the scrollbar otherwise\n    // text-lines will not calculated properly as the shadow will technically be\n    // narrower for content\n\n\n    hiddenTextarea.setAttribute('style', sizingStyle + ';' + HIDDEN_TEXTAREA_STYLE);\n    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';\n    var minHeight = Number.MIN_SAFE_INTEGER;\n    var maxHeight = Number.MAX_SAFE_INTEGER;\n    var height = hiddenTextarea.scrollHeight;\n    var overflowY = void 0;\n    if (boxSizing === 'border-box') {\n        // border-box: add border, since height = content + padding + border\n        height = height + borderSize;\n    } else if (boxSizing === 'content-box') {\n        // remove padding, since height = content\n        height = height - paddingSize;\n    }\n    if (minRows !== null || maxRows !== null) {\n        // measure height of a textarea with a single row\n        hiddenTextarea.value = ' ';\n        var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n        if (minRows !== null) {\n            minHeight = singleRowHeight * minRows;\n            if (boxSizing === 'border-box') {\n                minHeight = minHeight + paddingSize + borderSize;\n            }\n            height = Math.max(minHeight, height);\n        }\n        if (maxRows !== null) {\n            maxHeight = singleRowHeight * maxRows;\n            if (boxSizing === 'border-box') {\n                maxHeight = maxHeight + paddingSize + borderSize;\n            }\n            overflowY = height > maxHeight ? '' : 'hidden';\n            height = Math.min(maxHeight, height);\n        }\n    }\n    // Remove scroll bar flash when autosize without maxRows\n    if (!maxRows) {\n        overflowY = 'hidden';\n    }\n    return { height: height, minHeight: minHeight, maxHeight: maxHeight, overflowY: overflowY };\n}\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}